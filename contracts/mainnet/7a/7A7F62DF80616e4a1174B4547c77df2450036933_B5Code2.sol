// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

import "./ICode.sol";

contract B5Code2 is ICode{

    string public code =
        'n.translate = function (e, t) {o.translate(e, t)};n.rotate = function (e) {o.rotate(e)};n.scale = function (e, t) {null == t && (t = e), o.scale(e, t)};n.applyMatrix = function (e, t, n, a, r, i) {o.transform(e, t, n, a, r, i)};n.shearX = function (e) {o.transform(1, 0, Math.tan(e), 1, 0, 0)};n.shearY = function (e) {o.transform(1, Math.tan(e), 0, 1, 0, 0)};n.resetMatrix = function () {o.resetTransform(), o.scale(n._pixelDensity, n._pixelDensity)};n.pushMatrix = n.push = function () {o.save()};n.popMatrix = n.pop = function () {o.restore()};n.image = function (e, t, a, r, i, l, u, s, c) {let h = e.MAGIC == n.MAGIC ? e.canvas : e;function d() {if (e.MAGIC != n.MAGIC || !n._tint) return;let t = e.canvas.getContext("2d");t.save(), t.resetTransform(), t.clearRect(0, 0, t.canvas.width, t.canvas.height), t.drawImage(f.canvas, 0, 0), t.restore()}return e.MAGIC == n.MAGIC && null != n._tint && (!function (e, t) {null == f && (f = document.createElement("canvas").getContext("2d"));null == e && (e = o.canvas.width, t = o.canvas.height);f.canvas.width == e && f.canvas.height == t || (f.canvas.width = e, f.canvas.height = t)}(e.canvas.width, e.canvas.height), f.drawImage(e.canvas, 0, 0), e.tinted(n._tint)), r ? l ? (s || (s = h.width), c || (c = h.height), o.drawImage(h, l, u, s, c, t, a, r, i), void d()) : (o.drawImage(h, t, a, r, i), void d()) : (e.MAGIC == n.MAGIC || e.width ? o.drawImage(h, t, a, e.width, e.height) : o.drawImage(h, t, a, e.videoWidth, e.videoHeight), void d())};n.loadPixels = function () {l = o.getImageData(0, 0, n.canvas.width, n.canvas.height), n.pixels = l.data};n.updatePixels = function () {null != l && o.putImageData(l, 0, 0)};n.loadImage = function (e, t) {u++;let o = n.createGraphics(100, 100), a = o.canvas.getContext("2d"), r = new Image;return r.src = e, r.crossOrigin = "Anonymous", r.onload = function () {a.canvas.width = r.width, a.canvas.height = r.height, o.width = r.width, o.height = r.height, a.drawImage(r, 0, 0), u--, t && t(o)}, o};function w(e, t) {null == h && (h = document.createElement("canvas").getContext("2d")), null == e && (e = o.canvas.width, t = o.canvas.height), h.canvas.width == e && h.canvas.height == t || (h.canvas.width = e, h.canvas.height = t)}n.resize = function (e, t) {w(), h.drawImage(o.canvas, 0, 0), n.width = e, n.height = t, o.canvas.width = e * n._pixelDensity, o.canvas.height = t * n._pixelDensity, o.save(), o.resetTransform(), o.clearRect(0, 0, o.canvas.width, o.canvas.height), o.drawImage(h.canvas, 0, 0, o.canvas.width, o.canvas.height), o.restore()};n.loadFont = function (e, t) {let n = e.split("/"), o = n[n.length - 1].split(".")[0].replace(" ", ""),'
        'a = `@font-face {\'\\n        font-family: \'${o}\';\\n        src: url(\'${e}\');\\n      }`'
        ';const r = document.createElement("style");return r.textContent = a, document.head.append(r), o};n.textFont = function (e) {n._textFont = e};n.textSize = function (e) {n._textSize = e, n._textLeading = e};n.textLeading = function (e) {n._textLeading = e};n.textStyle = function (e) {n._textStyle = e};n.textAlign = function (e, t) {o.textAlign = e, t && (o.textBaseline = t == n.CENTER ? "middle" : t)};n.text = function (e, t, a, r) {if (!e) return;if (e = e.toString(), n._noFill && n._noStroke) return;o.font = `${n._textStyle} ${n._textSize}px ${n._textFont}`;let i = e.split("\\n");for (let e = 0; e < i.length; e++) n._noFill || o.fillText(i[e], t, a, r), n._noStroke || o.strokeText(i[e], t, a, r), a += n._textLeading};n.textWidth = function (e) {return o.font = `${n._textStyle} ${n._textSize}px ${n._textFont}`, o.measureText(e).width};n.textAscent = function (e) {return o.font = `${n._textStyle} ${n._textSize}px ${n._textFont}`, o.measureText(e).actualBoundingBoxAscent};n.textDescent = function (e) {return o.font = `${n._textStyle} ${n._textSize}px ${n._textFont}`, o.measureText(e).actualBoundingBoxDescent};var E = 4;var S = .5;var C = function (e) {return .5 * (1 - Math.cos(e * Math.PI))};var A;n.noise = function (e, t, n) {if (t = t || 0, n = n || 0, null == A) {A = new Array(4096);for (var o = 0; o < 4096; o++) A[o] = Math.random()}e < 0 && (e = -e), t < 0 && (t = -t), n < 0 && (n = -n);for (var a, r, i, l, u, s = Math.floor(e), c = Math.floor(t), h = Math.floor(n), f = e - s, d = t - c, p = n - h, m = 0, g = .5, v = 0; v < E; v++) {var M = s + (c << 4) + (h << 8);a = C(f), r = C(d), i = A[4095 & M], i += a * (A[M + 1 & 4095] - i), l = A[M + 16 & 4095], l += a * (A[M + 16 + 1 & 4095] - l), i += r * (l - i), l = A[4095 & (M += 256)], l += a * (A[M + 1 & 4095] - l), u = A[M + 16 & 4095], u += a * (A[M + 16 + 1 & 4095] - u), l += r * (u - l), i += C(p) * (l - i), m += i * g, g *= S, s <<= 1, c <<= 1, h <<= 1, (f *= 2) >= 1 && (s++, f--), (d *= 2) >= 1 && (c++, d--), (p *= 2) >= 1 && (h++, p--)}return m};n.noiseDetail = function (e, t) {e > 0 && (E = e), t > 0 && (S = t)};const T = function () {let e, t, n = 4294967295;return {setSeed(o) {e = t = (null == o ? Math.random() * n : o) >>> 0}, getSeed: () => t, rand: () => (e ^= e << 17, e ^= e >> 13, ((e ^= e << 5) >>> 0) / n)}};let D = T();D.setSeed();n.noiseSeed = function (e) {let t = null == e ? 4294967295 * Math.random() : e;A || (A = new Float32Array(4096));for (var n = 0; n < 4096; n++) t ^= t << 17, t ^= t >> 13, t ^= t << 5, A[n] = (t >>> 0) / 4294967295};n.randomSeed = function (e) {D.setSeed(e)};n.random = function (e, t) {return "number" == typeof e ? null != t ? D.rand() * (t - e) + e : D.rand() * e : e[~~(e.length * D.rand())]};n.randomGenerator = function (e) {e == n.LCG ? D = function () {const e = 4294967296;let t, n;return {setSeed(o) {n = t = (null == o ? Math.random() * e : o) >>> 0}, getSeed: () => t, rand: () => (n = (1664525 * n + 1013904223) % e) / e}}() : e == n.SHR3 && (D = T()), D.setSeed()};n.print = console.log;let b = ["setup", "draw", "preload", "mouseMoved", "mousePressed", "mouseReleased", "mouseDragged", "mouseClicked", "keyPressed", "keyReleased", "keyTyped", "touchStarted", "touchEnded"];for (let e of b) {let t = "_" + e + "Fn";n[t] = function () {}, n[t].isPlaceHolder = !0, n[e] ? n[t] = n[e] : Object.defineProperty(n, e, {set: function (e) {n[t] = e}})}function z() {n._noLoop || (a = null == n._frameRate ? requestAnimationFrame(z) : setTimeout(z, 1e3 / n._frameRate)), x(), r = !0, o.save(), n._drawFn(), o.restore(), n.frameCount++}n.noLoop = function () {n._noLoop = !0, a = null};n.loop = function () {n._noLoop = !1, null == a && z()};n.redraw = function () {z()};n.frameRate = function (e) {n._frameRate = e};setTimeout(function () {n._preloadFn(), c = window.performance.now(), function e() {if (u > 0) return setTimeout(e, 10);n._setupFn();z()}()}, 1);n.canvas.onmousemove = function (e) {n.pmouseX = n.mouseX, n.pmouseY = n.mouseY, n.mouseX = e.offsetX, n.mouseY = e.offsetY, n.mouseIsPressed ? n._mouseDraggedFn(e) : n._mouseMovedFn(e)};n.canvas.onmousedown = function (e) {n.pmouseX = n.mouseX, n.pmouseY = n.mouseY, n.mouseX = e.offsetX, n.mouseY = e.offsetY, n.mouseIsPressed = !0, n.mouseButton = [n.LEFT, n.CENTER, n.RIGHT][e.button], n._mousePressedFn(e)};n.canvas.onmouseup = function (e) {n.pmouseX = n.mouseX, n.pmouseY = n.mouseY, n.mouseX = e.offsetX, n.mouseY = e.offsetY, n.mouseIsPressed = !1, n._mouseReleasedFn(e)};n.canvas.onclick = function (e) {n.pmouseX = n.mouseX, n.pmouseY = n.mouseY, n.mouseX = e.offsetX, n.mouseY = e.offsetY, n.mouseIsPressed = !0, n._mouseClickedFn(e), n.mouseIsPressed = !1};window.addEventListener("keydown", function (e) {n.keyIsPressed = !0, n.key = e.key, n.keyCode = e.keyCode, s[n.keyCode] = !0, n._keyPressedFn(e), 1 == e.key.length && n._keyTypedFn(e)});window.addEventListener("keyup", function (e) {n.keyIsPressed = !1, n.key = e.key, n.keyCode = e.keyCode, s[n.keyCode] = !1, n._keyReleasedFn(e)});n.keyIsDown = function (e) {return !!s[e]};';

    function getCode(string calldata) external view override returns(string memory) {
        return code;
    }

}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

interface ICode {
    function getCode(string calldata params) external view returns (string memory);
}