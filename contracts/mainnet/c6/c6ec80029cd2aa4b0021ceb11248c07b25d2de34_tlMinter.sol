// SPDX-License-Identifier: UNLICENSED

/**
TERMS AND CONDITIONS OF SALE
the little details
These Terms and Conditions of Sale (the “Sale Terms and Conditions”) constitute a legally binding agreement between you and WAGMI Studios Ltd. (“WAGMI”, “we”, “We”, “Us”, or “us”).  The littles collection is a collection of digital artworks (non-fungible tokens, or “NFT”s) running on the Ethereum network. This website is an interface allowing participants to exchange content comprising digital collectibles in the form of images (the “littles collection NFT”s), and content related thereto. 
These Sale Terms and Conditions govern your purchase and use of any littles collection NFT and Content, including all art, graphics and images that may be associated with your littles collection NFT (the “Artwork”).  
Users are entirely responsible for the safety and management of their own private Ethereum wallets and validating all transactions and contracts generated by this website before approval. As transactions involving littles connection NFTs and Artwork runs on the Ethereum network, there is no ability to undo, reverse, or restore any transactions.
By purchasing any littles collection NFT, or by entering into any other transaction for a littles collection NFT or related Artwork, you expressly acknowledge that you understand and accept all of these Sale Terms and Conditions. IF YOU DO NOT AGREE TO BE BOUND BY THESE SALE TERMS AND CONDITIONS, THEN YOU MAY NOT PURCHASE ANY LITTLES COLLECTION NFTS OR OTHERWISE TRANSACT ANY BUSINESS INVOLVING LITTLES COLLECTION NFTS OR RELATED ARTWORK.
OWNERSHIP AND LICENSING OF INTELLECTUAL PROPERTY RIGHTS
You acknowledge and agree that WAGMI owns all legal right, title, and interest in and to the littles collection brand, logo, thelittles.io domain name and related intellectual property, including the Artwork and all related intellectual property rights in and to the Artwork (collectively, the “WAGMI Materials”). You acknowledge that the WAGMI Materials are protected by applicable laws including applicable copyright and trademark laws. The rights that you have in and to the Artwork are limited to those expressly stated in these Sale Terms and Conditions. WAGMI reserves all rights and ownership in and to the WAGMI Materials not expressly granted to you in these Sale Terms and Conditions.  
You acknowledge and agree that, except with the express written permission of WAGMI, which is not and shall not be granted by these Sale Terms and Conditions: (a) you will not apply for, register, or otherwise use or attempt to use any WAGMI trademarks or service marks, or any confusingly similar marks, anywhere in the world; and (b) you have no right to and shall in no event take any enforcement action (including by, for example, sending takedown notices) or make any claims based on any WAGMI Materials without WAGMI’s prior written consent, and WAGMI may, in its sole discretion, undertake any necessary actions to prevent any unlicensed or unauthorized use and/or distribution of any WAGMI Materials.
When you purchase any littles collection NFT, you own the NFT. Each of the littles collection NFTs is a NFT on the Ethereum blockchain. Ownership of the NFT is mediated entirely by the Smart Contract and the Ethereum Network.
Upon your purchase of any littles collection NFT including any related Artwork, and subject to your ongoing and continued compliance with these Sale Terms and Conditions, WAGMI grants you a non-exclusive, transferable, sub-licensable, perpetual, non-revocable, royalty-free licence (the “License”) to use, produce, reproduce, and display the Artwork, and create derivative works from the Artwork, in any form or medium, for any purpose or use including any commercial purpose or use (the “Licensed Rights”).  
USER CONDUCT
You shall not: 
(a)	Use or reproduce the Artwork in any manner that is inconsistent with these Website Terms and Conditions;
(b)	attempt to trademark, copyright, or otherwise acquire additional intellectual property rights in or to the Artwork;
(c)	use or reproduce the Artwork in any manner to harass, abuse, or threaten others or otherwise violate any person's legal rights;
(d)	use or reproduce the Artwork to violate any person’s legal rights, or to violate any intellectual property rights of WAGMI or WAGMI’s licensors and affiliates, or any third party; 
(e)	use or reproduce the Artwork in any fraudulent manner or in any manner to perpetrate any fraud, to publish or distribute any obscene or defamatory material, to publish or distribute any material that incites violence, hate, or discrimination towards any group, to publish or distribute any pornographic material or use or reproduce the Artwork for any pornographic purpose, or to unlawfully gather information about others;
(f)	transfer the right to use the Artwork, except to the extent expressly permitted in these Sale Terms and Conditions; 
(g)	disparage WAGMI, its affiliates, and their respective officers, directors, members, employees, agents, and/or attorneys; or
(h)	use or reproduce the Artwork except as expressly provided for in these Sale Terms and Conditions. 
To the extent the Artwork contains any third-party intellectual property rights (e.g., licensed intellectual property rights from a celebrity, artist, or other public figure), you understand and agree that: (i) you will not have the right to use any third-party intellectual property rights in any way except as incorporated in the Artwork, and only subject to the license and restrictions contained in these Sale Terms and Conditions; (ii) depending on the nature of the license granted from the owner of the third-party intellectual property rights, WAGMI may need to pass through additional restrictions on your ability to use the Artwork; and (iii) to the extent that WAGMI notifies you in these Sale Terms and Conditions or otherwise notifies you of any additional restrictions that apply to the Artwork due to third-party intellectual property rights, you will comply with those restrictions, and your failure to comply with those restrictions will be deemed a breach of these Sale Terms and Conditions.
TERMINATION OF LICENSED RIGHTS
The Licensed Rights shall automatically terminate and all rights shall return to WAGMI if: (a) you make any assignment for the benefit of creditors, file a petition in bankruptcy or are adjudged bankrupt, or become insolvent, or your assets are placed in the hands of a receiver; (b) you engage in any unlawful business practice related to your littles collection NFT; (c) you breach any of these Sale Terms and Conditions or any of your obligations under these Sale Terms and Conditions; or (d) you disparage WAGMI, its affiliates, and their respective officers, directors, members, employees, agents, and/or attorneys. 
DISCLAIMER OF WARRANTIES & LIMITATION OF LIABILITY
YOU UNDERSTAND AND ACKNOWLEDGE THAT LITTLES COLLECTION NFTS ARE INTANGIBLE DIGITAL ASSETS THAT EXIST ONLY BY VIRTUE OF THE OWNERSHIP RECORD MAINTAINED ON THE ETHEREUM BLOCKCHAIN AND ARE NOT LEGAL TENDER OR INTENDED FOR INVESTMENT PURPOSES.  ALL SMART CONTRACTS RELATING TO YOUR LITTLES COLLECTION NFT RUN ON THE DECENTRALIZED LEDGER WITHIN THE ETHEREUM BLOCKCHAIN. ALL TRANSFERS OF LITTLES COLLECTION NFTS ARE CONDUCTED AND OCCUR ON THE DECENTRALIZED LEDGER WITHIN THE ETHEREUM BLOCKCHAIN. WAGMI HAS NO CONTROL OVER AND MAKES NO GUARANTEES OR PROMISES WITH RESPECT TO ANY OF THOSE SMART CONTRACTS OR TRANSFERS. ALL LITTLES COLLECTION NFTS AND ARTWORK ARE PROVIDED "AS IS" AND "AS AVAILABLE", WITHOUT WARRANTIES OF ANY KIND EITHER EXPRESS OR IMPLIED. WAGMI DISCLAIMS ALL REPRESENTATIONS AND WARRANTIES, EXPRESS OR IMPLIED, REGARDING LITTLES COLLECTION NFTS OR ANY PART THEREOF (INCLUDING ANY SMART CONTRACT, ARTWORK, OR SECONDARY SALES OF LITTLES COLLECTION NFTS), INCLUDING ANY EXPRESS OR IMPLIED REPRESENTATIONS AND WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE, CORRECTNESS, ACCURACY, RELIABILITY, THAT DEFECTS IN LITTLES COLLECTION NFTS, OR ITS SUPPORTING SYSTEMS OR TECHNOLOGY, WILL BE CORRECTED, OR THAT THE DELIVERY MECHANISM FOR LITTLES COLLECTION NFTS WILL BE FREE OF VIRUSES OR OTHER HARMFUL COMPONENTS. 
IN NO EVENT AND UNDER NO THEORY OF LIABILITY, INCLUDING CONTRACT, STATUTE, TORT, NEGLIGENCE, STRICT LIABILITY, WARRANTY, OR OTHERWISE, WILL WAGMI BE LIABLE TO YOU FOR ANY INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL, OR PUNITIVE DAMAGES, OR LOST PROFITS ARISING FROM OR RELATING TO YOUR LITTLES COLLECTION NFT AND ARTWORK OR YOUR ACQUISITION OF LITTLES COLLECTION NFTS, OR ARTWORK (EVEN IF WAGMI HAS BEEN ADVISED OF THE POSSIBILITY OF THOSE DAMAGES), AND IN NO EVENT WILL THE AGGREGATE LIABILITY OF WAGMI FOR ANY CAUSE OR ACTION WHATSOEVER RELATED TO YOUR LITTLES COLLECTION NFT AND ARTWORK OR YOUR ACQUISITION OF LITTLES COLLECTION NFTS, EXCEED CAD$100.
THE LIMITATIONS OF THIS SECTION WILL APPLY EVEN IF ANY REMEDY SET FORTH IN THESE SALE TERMS AND CONDITIONS IS FOUND TO HAVE FAILED ITS ESSENTIAL PURPOSE AND TO THE FULLEST EXTENT PERMITTED BY LAW IN THE APPLICABLE JURISDICTION.
ASSUMPTION OF RISK
You agree that you assume the following risks, and that you understand and agree to the following: (a) to the extent there is a price or market for a blockchain asset such as a non-fungible token, (i) those prices and markets are extremely volatile, (ii) variations in the price of other digital assets could materially and adversely affect the value of any digital assets you own, including your littles collection NFT, and (iii) there is no guarantee that your littles collection NFTs will have or retain any value; (b) the commercial or market value of your littles collection NFT may materially diminish in value as a result of a variety of things, including negative publicity associated with WAGMI; (c) there are risks associated with using and acquiring Internet-native assets (e.g., non-fungible tokens, cryptocurrencies, etc.) including the risk of hardware, software and Internet connections and/or failures, the risk of malicious software introduction, and the risk that third parties may obtain unauthorized access to information and assets stored within your digital "wallet" or elsewhere, and WAGMI expressly disclaims any responsible for these risks; (d) WAGMI does not make any promises or guarantees about the availability of your littles collection NFTs or Artwork or any other littles collection NFTs or Artwork, or that they will host your littles collection NFTs or Artwork or any other littles collection NFTs or Artwork at any specific location and/or for any specific period of time; (e) upgrades to the Ethereum blockchain, a hard fork or other change to the Ethereum blockchain, a failure or cessation of the Ethereum blockchain or its underlying cryptocurrency, or a change in how transactions are confirmed on the Ethereum blockchain, may have adverse effects on all blockchains using those or similar technologies, including littles collection NFTs, and WAGMI shall not be responsible for any such adverse effect; (f) any agreements and obligations by WAGMI are not transferable, and WAGMI does not make (and expressly disclaims) any promises or guarantees to any third parties related to your littles collection NFT(s); (g) the risk of losing access to your littles collection NFT due to loss of your private key(s), custodial error or purchaser error; (h) the risk of mining attacks; (i) the risk of hacking, security weaknesses, fraud, counterfeiting, cyber attacks and other technological difficulties; (j) the risk of changes to the regulatory regime governing blockchain technologies, cryptocurrencies, and tokens and new regulations, unfavorable regulatory intervention in one or more jurisdictions or policies any of which may materially adversely affect the use and value of your littles collection NFT(s); (k) the taxes due as a result of, and tax consequences associated with, your acquisition of any littles collection NFT or other littles collection NFT-related transactions; and (l) the risk of engaging in any transactions relating to your littles collection NFTs with third parties (e.g., transferring your littles collection NFT to a third party on any so-called "secondary market").
You also acknowledge and agree that: (i) you have obtained sufficient information to make an informed decision regarding the littles collection NFTs; (ii) you are solely responsible for determining the nature, potential value, suitability and appropriateness of these risks for yourself; and (iii) WAGMI will not be responsible for any communication failures, disruptions, errors, distortions or delays you may experience related to any littles collection NFTs.
LAW AND VENUE  
The laws of British Columbia govern these Sale Terms and Conditions and all proceedings arising out of it. All disputes between the parties relating to these Sale Terms and Conditions will be finally resolved in the Supreme Court of British Columbia or the Federal Court of Canada sitting in Vancouver, British Columbia.
ELIGIBILITY
You acknowledge that you cannot purchase or use any littles collection NFT or Artwork if you: (a) are not able to form legally binding contracts; or (b) are a person with whom such transactions are prohibited under economic or trade sanctions.
INDEMNITY
You will defend, indemnify, and hold WAGMI and its employees, representatives, executives, directors, and affiliates and related entities harmless from any claims, actions, suits, losses, costs, liabilities and expenses (including reasonable lawyer’s fees) relating to or arising out of your purchase of any littles collection NFT, Artwork, and Licensed Rights, including: (a) your breach of any of these Sale Terms and Conditions or any other terms and conditions of use of our website; (b) your violation of any law or the rights of any third party as a result of your own interaction with that third party; (c) any allegation that any materials or communications that you submit to us infringe or otherwise violate the intellectual property rights of any third party; or (d) any other activities in connection with any littles collection NFT or Artwork. This indemnity shall be applicable without regard to the negligence of any party, including any indemnified person. We reserve the right to control the defense of any matter for which you are required to indemnify us, and you agree to cooperate with our defense of these claims.
TAXES
You are solely responsible for all taxes and charges that apply in connection with any littles collection NFT transaction. WAGMI is not responsible for determining the taxes that may apply to any of your transactions, and offers no representation or warranty that any such transaction will be tax-free or will not otherwise have tax consequences.
MISCELLANEOUS
If any term or provision of these Sale Terms and Conditions is invalid, illegal, or unenforceable in any jurisdiction, such invalidity, illegality, or unenforceability shall not affect any other term or provision of these Sale Terms and Conditions or invalidate or render unenforceable such term or provision in any other jurisdiction. Use of section headers in these Sale Terms and Conditions is for convenience only and will not have any impact on the interpretation of any provision. 
INTERPRETATION AND ENTIRE AGREEMENT
Throughout these Sale Terms and Conditions, the use of the word "including" means "including but not limited to." Any reference to “agree”, “agrees”, “represent”, “represents”, “acknowledge”, “acknowledges”, or any “acknowledgement” by you in these Sale Terms and Conditions, shall refer in all cases to your acceptance of these Sale Terms and Conditions by proceeding with your purchase or acquisition of a littles  collection NFT.  These Sale Terms and Conditions constitute the entire and only agreement between us and you with respect to the subject matter hereof.
NO WAIVER
Our failure to enforce or insist upon strict compliance with any provision of these Sale Terms and Conditions shall not be deemed a waiver of such provision nor of the right to enforce such provision.
CHOICE OF LANGUAGE
The parties acknowledge that they require that these Sale Terms and Conditions be drawn up in the English language only.  Les parties reconnaissent qu’elles ont exigé que la présente convention soit rédigée en langue anglaise seulement.
 */

pragma solidity ^0.8.3;

import "./ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface iWhitelist {
    function isWhitelisted(address address_, bytes32[] memory proof_)
        external
        view
        returns (bool);
}

interface iEvolution {
    function getYieldRate(uint256 tokenId_) external view returns (uint256);
}

contract tlMinter is ERC721, Ownable {
    // Minting Price
    uint256 public ethPrice = 0.125 ether;

    // Supply variables
    uint256 public totalSupply;
    uint256 public maxSupply;
    uint256 public maxPerTxn;
    uint256 public maxPerWallet;

    // Sale state control variables
    bool public burningEnabled;
    bool public whitelistMintingEnabled;
    bool public publicMintingEnabled;
    uint256 public startSaleTimestamp;

    // Wallet to withdraw to
    address payable public payableWallet;

    // Metadata variables
    string public _baseURI_;

    // External Contracts
    iWhitelist tlWhitelist;
    address public evolutionAddress;

    // Track mints
    mapping(address => uint256) walletMints;

    // Add one eth on deploy
    constructor() payable ERC721("the littles NFT", "thelittlesnft") {
        totalSupply = 0; // Start at Token ID 1
        maxSupply = 10000;
        maxPerTxn = 2;
        maxPerWallet = 2; // @todo This will update to 4 during public minting
        startSaleTimestamp = 1637978400; // @todo set minting date

        // placeholder for testing
        _baseURI_ = "https://s3.amazonaws.com/nft-meta.thelittles.io/";

        // @todo Add wil's wallet address here
        payableWallet = payable(
            address(0x3811866A85b0e42B437B36BB4FD2f05e4c3b16f8)
        );

        // @todo Add Inu's contract reference here
        tlWhitelist = iWhitelist(0x1A3b1D5e9678d9e71271f2c5017A10D3Afb7d296);
    }

    /** *********************************** **/
    /** ********* Internal Functions ****** **/
    /** *********************************** **/
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /** *********************************** **/
    /** ********* Minting Functions ******* **/
    /** *********************************** **/
    function mintTokens(uint256 quantity) private {
        walletMints[msg.sender] += quantity;
        for (uint256 i = 0; i < quantity; i++) {
            uint256 newTokenId = totalSupply + 1;
            _safeMint(msg.sender, newTokenId);
            totalSupply++;
        }
    }

    function defaultMintingRules(uint256 value, uint256 quantity) private view {
        require(isContract(msg.sender) == false, "Cannot mint from a contract");
        require(value == getPrice(quantity), "wrong value");
        require(totalSupply < maxSupply, "sold out");
        require(totalSupply + quantity <= maxSupply, "exceeds max supply");
        require(quantity <= maxPerTxn, "exceeds max per txn");
        require(
            walletMints[msg.sender] + quantity <= maxPerWallet,
            "exceeds max per wallet"
        );
    }

    function mintWhitelist(uint256 quantity, bytes32[] memory proof)
        public
        payable
    {
        require(whitelistMintingEnabled, "minting not enabled");
        require(
            tlWhitelist.isWhitelisted(msg.sender, proof),
            "address supplied is not on the whitelist"
        );
        require(tx.origin == msg.sender, "Contracts not allowed");

        defaultMintingRules(msg.value, quantity);
        mintTokens(quantity);
    }

    function mintPublic(uint256 quantity) public payable {
        require(
            block.timestamp >= startSaleTimestamp,
            "official sale has not started"
        );
        require(publicMintingEnabled, "minting not enabled");
        require(tx.origin == msg.sender, "Contracts not allowed");
        defaultMintingRules(msg.value, quantity);
        mintTokens(quantity);
    }

    function reserveTokens(uint256 tokensToReserve) public onlyOwner {
        mintTokens(tokensToReserve);
    }

    /** *********************************** **/
    /** ********* Owner Functions ********* **/
    /** *********************************** **/
    function setEvolutionAddress(address _address) external onlyOwner {
        evolutionAddress = _address;
    }

    function setPriceInWei(uint256 _price) external onlyOwner {
        ethPrice = _price;
    }

    function setMaxSupply(uint256 _maxSupply) external onlyOwner {
        maxSupply = _maxSupply;
    }

    function setMaxPerWallet(uint256 _maxPerWallet) external onlyOwner {
        maxPerWallet = _maxPerWallet;
    }

    function setMaxPerTxn(uint256 _maxPerTxn) external onlyOwner {
        maxPerTxn = _maxPerTxn;
    }

    function toggleBurningEnabled() external onlyOwner {
        burningEnabled = !burningEnabled;
    }

    function toggleWhitelistMintingEnabled() external onlyOwner {
        whitelistMintingEnabled = !whitelistMintingEnabled;
    }

    function togglePublicMintingEnabled() external onlyOwner {
        publicMintingEnabled = !publicMintingEnabled;
    }

    function setStartSaleTimestamp(uint256 _startSaleTimestamp)
        external
        onlyOwner
    {
        startSaleTimestamp = _startSaleTimestamp;
    }

    function setBaseURI(string memory _newBaseURI) external onlyOwner {
        _baseURI_ = _newBaseURI;
    }

    function setPayableWallet(address _payableWallet) external onlyOwner {
        payableWallet = payable(_payableWallet);
    }

    function withdraw() external onlyOwner {
        uint256 balance = address(this).balance;
        payable(payableWallet).transfer(balance);
    }

    /** *********************************** **/
    /** ***** 0xInuarashi Functions ******* **/
    /** *** https://twitter.com/0xinuarashi **/
    /** *********************************** **/
    function ownerOf(uint256 tokenId)
        public
        view
        virtual
        override
        returns (address)
    {
        return _owners[tokenId];
    }

    function walletOfOwner(address address_)
        public
        view
        returns (uint256[] memory)
    {
        uint256 _balance = balanceOf(address_);
        uint256[] memory _tokens = new uint256[](_balance);
        uint256 _index;

        for (uint256 i = 0; i < maxSupply; i++) {
            if (address_ == ownerOf(i)) {
                _tokens[_index] = i;
                _index++;
            }
        }

        return _tokens;
    }

    function multiTransferFrom(
        address from_,
        address to_,
        uint256[] memory tokenIds_
    ) public {
        for (uint256 i = 0; i < tokenIds_.length; i++) {
            transferFrom(from_, to_, tokenIds_[i]);
        }
    }

    function multiSafeTransferFrom(
        address from_,
        address to_,
        uint256[] memory tokenIds_,
        bytes memory data_
    ) public {
        for (uint256 i = 0; i < tokenIds_.length; i++) {
            safeTransferFrom(from_, to_, tokenIds_[i], data_);
        }
    }

    /** *********************************** **/
    /** ******** Public Functions ********* **/
    /** *********************************** **/
    function getWalletMintCount(address addr) public view returns (uint256) {
        return walletMints[addr];
    }

    function getYieldRate(uint256 tokenId_) public view returns (uint256) {
        if (evolutionAddress != address(0x0)) {
            return iEvolution(evolutionAddress).getYieldRate(tokenId_);
        } else {
            revert("Evolution not enabled yet!");
        }
    }

    function getPrice(uint256 quantity) public view returns (uint256) {
        return ethPrice * quantity;
    }

    function burn(uint256 tokenId) public {
        require(burningEnabled, "burning enabled");
        require(
            _isApprovedOrOwner(_msgSender(), tokenId),
            "caller is not owner nor approved"
        );
        _burn(tokenId);
    }

    function remainingSupply() public view returns (uint256) {
        return maxSupply - totalSupply;
    }

    function _baseURI() internal view override returns (string memory) {
        return _baseURI_;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.3.2 (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) internal _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits a {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}