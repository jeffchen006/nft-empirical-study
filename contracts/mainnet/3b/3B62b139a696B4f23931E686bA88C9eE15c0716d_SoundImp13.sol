// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

library SoundImp13 {

  string internal constant PART = "let cachedImpulseBuffer,cachedImpulseBufferShort;async function initAudio(A,q,e){const t=[getImpulseBuffer(q),getImpulseBufferShort(e)];await Promise.all(t)}async function getImpulseBuffer(A){if(!cachedImpulseBuffer){const q=decodeBase64ToArrayBuffer(A);cachedImpulseBuffer=audioContext.decodeAudioData(q).catch((A=>{throw A}))}return cachedImpulseBuffer}async function getImpulseBufferShort(A){if(!cachedImpulseBufferShort){const q=decodeBase64ToArrayBuffer(A);cachedImpulseBufferShort=audioContext.decodeAudioData(q).catch((A=>{throw A}))}return cachedImpulseBufferShort}function encounterSound(A=200,q=2,e=5,t=5){const o=new OscillatorNode(audioContext);o.type=\"sine\",o.frequency.value=A,o.detune.value=0;const a=new GainNode(audioContext);a.gain.value=q,o.connect(a);const n=new DelayNode(audioContext);n.delayTime.value=.1;const i=new DelayNode(audioContext);i.delayTime.value=.21;const V=new DelayNode(audioContext);V.delayTime.value=.31;const g=new DelayNode(audioContext);g.delayTime.value=.41;const s=new DelayNode(audioContext);s.delayTime.value=.51;const C=new DelayNode(audioContext);C.delayTime.value=.6;const E=new DelayNode(audioContext);E.delayTime.value=.7;const c=new DelayNode(audioContext);c.delayTime.value=.851,a.connect(n).connect(i).connect(V).connect(g).connect(s).connect(C).connect(E).connect(c);const B=new ConvolverNode(audioContext);B.normalize=!0;const M=new ConvolverNode(audioContext);M.normalize=!0;const I=44100*e,r=new AudioBuffer({length:I,sampleRate:audioContext.sampleRate,numberOfChannels:2}),Q=r.getChannelData(0);for(let A=0;A<I;A++)Q[A]=.5*Math.random();const l=new AudioBuffer({length:I,sampleRate:audioContext.sampleRate,numberOfChannels:2}),m=l.getChannelData(1);for(let A=0;A<I;A++)m[A]=Math.sin(.001*A)*Math.random();B.buffer=r,M.buffer=l,a.connect(B).connect(masterGain).connect(bandpassFilter).connect(audioContext.destination),a.connect(M).connect(masterGain).connect(bandpassFilter).connect(audioContext.destination),o.start(),o.onended=function(){app.audio},setTimeout((()=>{a.gain.linearRampToValueAtTime(0,audioContext.currentTime+2)}),t)}async function playAngel(A=5,q=400){const e=[],t=[],o=await getImpulseBuffer(reverbData),a=audioContext.createConvolver();a.buffer=o;for(let o=0;o<4;o++)e[o]=audioContext.createOscillator(),t[o]=audioContext.createGain(),e[o].type=\"sine\",e[o].frequency.value=q*(1+.02*o),t[o].gain.setValueAtTime(.25,audioContext.currentTime),t[o].gain.exponentialRampToValueAtTime(1e-4,audioContext.currentTime+A),e[o].connect(t[o]),t[o].connect(a).connect(masterGain).connect(bandpassFilter).connect(audioContext.destination),e[o].start(audioContext.currentTime);setTimeout((()=>{for(let A=0;A<4;A++)e[A].stop(audioContext.currentTime)}),1e3*A)}async function playAngelSound(A=4,q=100,e=.5,t=.5){const o=[],a=[],n=await getImpulseBuffer(reverbData),i=audioContext.createConvolver();i.buffer=n;const V=audioContext.createGain();V.gain.value=t,i.connect(V),V.connect(masterGain).connect(bandpassFilter).connect(audioContext.destination);for(let t=0;t<4;t++)o[t]=audioContext.createOscillator(),a[t]=audioContext.createGain(),o[t].type=\"sine\",o[t].frequency.value=q*(1+.02*t),a[t].gain.setValueAtTime(e,audioContext.currentTime),a[t].gain.exponentialRampToValueAtTime(1e-4,audioContext.currentTime+A),o[t].connect(a[t]),a[t].connect(i),o[t].start(audioContext.currentTime);setTimeout((()=>{for(let A=0;A<4;A++)o[A].stop(audioContext.currentTime)}),1e3*A)}initAudio(audioContext,reverbData,reverbDataShort).then((()=>{}));let audioBuffer,storedAudioBuffer,playElectricLoop=!1;async function playElectric(A=1e3,q=10,e=1,t=!1){const o=await getImpulseBuffer(reverbData),a=audioContext.createConvolver();a.buffer=o;const n=audioContext.createOscillator();n.type=\"sine\",n.frequency.setValueAtTime(A,audioContext.currentTime);const i=audioContext.createGain();i.gain.setValueAtTime(.1,audioContext.currentTime);const V=audioContext.createOscillator();V.type=\"square\",V.frequency.setValueAtTime(50,audioContext.currentTime);const g=audioContext.createGain();g.gain.setValueAtTime(2e3,audioContext.currentTime);const s=audioContext.createOscillator();s.type=\"square\",s.frequency.setValueAtTime(e,audioContext.currentTime);const C=audioContext.createGain();C.gain.setValueAtTime(.2,audioContext.currentTime),V.connect(g),g.connect(n.frequency),n.connect(i),s.connect(C),C.connect(i.gain),i.connect(a),a.connect(masterGain).connect(bandpassFilter).connect(compressor).connect(audioContext.destination),n.start(),V.start(),s.start(),setTimeout((()=>{n.";

  function getPart() external pure returns (string memory) {
    return PART;
  }
  
}